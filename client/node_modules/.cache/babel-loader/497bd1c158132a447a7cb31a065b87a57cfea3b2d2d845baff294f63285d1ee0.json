{"ast":null,"code":"var _jsxFileName = \"/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/FindEventsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport EventBoxInfo from './EventBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FindEventsPage = () => {\n  _s();\n  const [events, setEvents] = useState([]); // State to store events\n\n  useEffect(() => {\n    getAllEvents();\n  }, []); // Empty dependency array means this effect runs once on component mount.\n\n  const getAllEvents = async () => {\n    try {\n      const response = await fetch('http://localhost:9000/getAllEvents', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setEvents(data); // Store events data\n      } else {\n        throw new Error('An unexpected error occurred');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: events.map((event, index) => /*#__PURE__*/_jsxDEV(\"ul\", {\n      style: {\n        listStyleType: \"none\",\n        display: \"flex\",\n        marginTop: \"10%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"li\", {\n        style: {\n          width: \"25%\"\n        },\n        children: /*#__PURE__*/_jsxDEV(EventBoxInfo, {\n          competitionName: event.Name,\n          startDate: event.StartDate,\n          location: event.Location,\n          type: event.GameType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 21\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 9\n  }, this);\n};\n_s(FindEventsPage, \"j18ueuia/psAZ/XawE3UyqzOWsE=\");\n_c = FindEventsPage;\nexport default FindEventsPage;\nvar _c;\n$RefreshReg$(_c, \"FindEventsPage\");","map":{"version":3,"names":["React","useState","useEffect","EventBoxInfo","jsxDEV","_jsxDEV","FindEventsPage","_s","events","setEvents","getAllEvents","response","fetch","method","headers","credentials","ok","data","json","Error","error","console","children","map","event","index","style","listStyleType","display","marginTop","width","competitionName","Name","startDate","StartDate","location","Location","type","GameType","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/FindEventsPage.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport EventBoxInfo from './EventBox';\n\nconst FindEventsPage = () =>{\n    const [events, setEvents] = useState([]); // State to store events\n\n    useEffect(() => {\n        getAllEvents();\n    }, []); // Empty dependency array means this effect runs once on component mount.\n\n    const getAllEvents = async()=>{\n        try {\n            const response = await fetch('http://localhost:9000/getAllEvents', {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                credentials: 'include'\n            });\n            if (response.ok) {\n                const data = await response.json();\n                setEvents(data); // Store events data\n            } else {\n                throw new Error('An unexpected error occurred');\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    return(\n        <div>\n            {events.map((event, index) => (\n                <ul style={{listStyleType:\"none\",display:\"flex\", marginTop:\"10%\"}} key={index}>\n                    <li style={{width:\"25%\"}}>\n                        <EventBoxInfo\n                            competitionName={event.Name}\n                            startDate={event.StartDate}\n                            location={event.Location}\n                            type={event.GameType}\n                        />\n                    </li>\n                </ul>\n            ))}\n        </div>\n    );\n}\n\nexport default FindEventsPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAChD,OAAOC,YAAY,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,MAAMC,cAAc,GAAGA,CAAA,KAAK;EAAAC,EAAA;EACxB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1CC,SAAS,CAAC,MAAM;IACZQ,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAS;IAC1B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QAC/DC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDC,WAAW,EAAE;MACjB,CAAC,CAAC;MACF,IAAIJ,QAAQ,CAACK,EAAE,EAAE;QACb,MAAMC,IAAI,GAAG,MAAMN,QAAQ,CAACO,IAAI,CAAC,CAAC;QAClCT,SAAS,CAACQ,IAAI,CAAC,CAAC,CAAC;MACrB,CAAC,MAAM;QACH,MAAM,IAAIE,KAAK,CAAC,8BAA8B,CAAC;MACnD;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;IACxB;EACJ,CAAC;EAED,oBACIf,OAAA;IAAAiB,QAAA,EACKd,MAAM,CAACe,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACrBpB,OAAA;MAAIqB,KAAK,EAAE;QAACC,aAAa,EAAC,MAAM;QAACC,OAAO,EAAC,MAAM;QAAEC,SAAS,EAAC;MAAK,CAAE;MAAAP,QAAA,eAC9DjB,OAAA;QAAIqB,KAAK,EAAE;UAACI,KAAK,EAAC;QAAK,CAAE;QAAAR,QAAA,eACrBjB,OAAA,CAACF,YAAY;UACT4B,eAAe,EAAEP,KAAK,CAACQ,IAAK;UAC5BC,SAAS,EAAET,KAAK,CAACU,SAAU;UAC3BC,QAAQ,EAAEX,KAAK,CAACY,QAAS;UACzBC,IAAI,EAAEb,KAAK,CAACc;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACxB;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC,GAR+DjB,KAAK;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OASzE,CACP;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAAAnC,EAAA,CA3CKD,cAAc;AAAAqC,EAAA,GAAdrC,cAAc;AA6CpB,eAAeA,cAAc;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}