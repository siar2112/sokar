{"ast":null,"code":"var _jsxFileName = \"/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/CompetitionInfoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport EventBoxInfo from './EventBox';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompetitionInfoPage = _ref => {\n  _s();\n  let {\n    match\n  } = _ref;\n  const [competitionTeams, setCompetitionTeams] = useState([]); // State to store all teams of a specific event\n  const {\n    params: {\n      id\n    }\n  } = match;\n  useEffect(() => {\n    getAllCompetitionTeams();\n  }, []); // Empty dependency array means this effect runs once on component mount.\n\n  const getAllCompetitionTeams = async () => {\n    try {\n      const response = await fetch('http://localhost:9000/getAllCompetitionTeams', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          id: id\n        }),\n        // corrected here,\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setCompetitionTeams(data); // Store events data\n      } else {\n        throw new Error('An unexpected error occurred');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  // Helper function to group teams by category\n  const groupByCategory = teams => {\n    return teams.reduce((groupedTeams, team) => {\n      (groupedTeams[team.Category] = groupedTeams[team.Category] || []).push(team);\n      return groupedTeams;\n    }, {});\n  };\n  const groupedTeams = groupByCategory(competitionTeams);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: Object.keys(groupedTeams).map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Category: \", category]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this), groupedTeams[category].map(team => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: team.Name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 29\n        }, this)\n      }, team.TeamID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 25\n      }, this))]\n    }, category, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 9\n  }, this);\n};\n_s(CompetitionInfoPage, \"Qas2CTKjl5+r7uJao9ggLviYmQM=\");\n_c = CompetitionInfoPage;\nexport default CompetitionInfoPage;\nvar _c;\n$RefreshReg$(_c, \"CompetitionInfoPage\");","map":{"version":3,"names":["React","useState","useEffect","EventBoxInfo","jsxDEV","_jsxDEV","CompetitionInfoPage","_ref","_s","match","competitionTeams","setCompetitionTeams","params","id","getAllCompetitionTeams","response","fetch","method","headers","body","JSON","stringify","credentials","ok","data","json","Error","error","console","groupByCategory","teams","reduce","groupedTeams","team","Category","push","children","Object","keys","map","category","fileName","_jsxFileName","lineNumber","columnNumber","Name","TeamID","_c","$RefreshReg$"],"sources":["/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/CompetitionInfoPage.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\nimport EventBoxInfo from './EventBox';\n\nconst CompetitionInfoPage = ({match}) => {\n    const [competitionTeams, setCompetitionTeams] = useState([]); // State to store all teams of a specific event\n    const { params: { id } } = match;\n\n    useEffect(() => {\n        getAllCompetitionTeams();\n    }, []); // Empty dependency array means this effect runs once on component mount.\n\n    const getAllCompetitionTeams = async()=>{\n        try {\n            const response = await fetch('http://localhost:9000/getAllCompetitionTeams', {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({id: id}), // corrected here,\n                credentials: 'include'\n            });\n            if (response.ok) {\n                const data = await response.json();\n                setCompetitionTeams(data); // Store events data\n            } else {\n                throw new Error('An unexpected error occurred');\n            }\n        } catch (error) {\n            console.error(error);\n        }\n    };\n\n    // Helper function to group teams by category\n    const groupByCategory = (teams) => {\n        return teams.reduce((groupedTeams, team) => {\n            (groupedTeams[team.Category] = groupedTeams[team.Category] || []).push(team);\n            return groupedTeams;\n        }, {});\n    };\n\n    const groupedTeams = groupByCategory(competitionTeams);\n\n    return (\n        <div>\n            {Object.keys(groupedTeams).map(category => (\n                <div key={category}>\n                    <h2>Category: {category}</h2>\n                    {groupedTeams[category].map(team => (\n                        <div key={team.TeamID}>\n                            <p>{team.Name}</p>\n                        </div>\n                    ))}\n                </div>\n            ))}\n        </div>\n    );\n};\n\nexport default CompetitionInfoPage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}