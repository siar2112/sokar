{"ast":null,"code":"var _jsxFileName = \"/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/UserSession.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create a context for the user session\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UserSessionContext = /*#__PURE__*/createContext();\n\n// Provide the context to your components\nexport function UserSessionProvider(_ref) {\n  _s();\n  let {\n    children\n  } = _ref;\n  const [userSession, setUserSession] = useState(() => JSON.parse(localStorage.getItem('userSession')) || null);\n\n  // Effect to update local storage whenever the userSession state changes\n  useEffect(() => {\n    if (userSession) {\n      localStorage.setItem('userSession', JSON.stringify(userSession));\n    } else {\n      localStorage.removeItem('userSession');\n    }\n  }, [userSession]);\n  return /*#__PURE__*/_jsxDEV(UserSessionContext.Provider, {\n    value: {\n      userSession,\n      setUserSession\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n}\n\n// Create a custom hook to use the user session context\n_s(UserSessionProvider, \"u/R6D6jsxDn1QvtR+eIeC/DrtCI=\");\n_c = UserSessionProvider;\nexport function useUserSession() {\n  _s2();\n  return useContext(UserSessionContext);\n}\n_s2(useUserSession, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"UserSessionProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","UserSessionContext","UserSessionProvider","_ref","_s","children","userSession","setUserSession","JSON","parse","localStorage","getItem","setItem","stringify","removeItem","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useUserSession","_s2","$RefreshReg$"],"sources":["/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/UserSession.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create a context for the user session\nconst UserSessionContext = createContext();\n\n// Provide the context to your components\nexport function UserSessionProvider({ children }) {\n    const [userSession, setUserSession] = useState(() => JSON.parse(localStorage.getItem('userSession')) || null);\n\n    // Effect to update local storage whenever the userSession state changes\n    useEffect(() => {\n        if (userSession) {\n            localStorage.setItem('userSession', JSON.stringify(userSession));\n        } else {\n            localStorage.removeItem('userSession');\n        }\n    }, [userSession]);\n\n    return (\n        <UserSessionContext.Provider value={{ userSession, setUserSession }}>\n            {children}\n        </UserSessionContext.Provider>\n    );\n}\n\n// Create a custom hook to use the user session context\nexport function useUserSession() {\n    return useContext(UserSessionContext);\n}\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,kBAAkB,gBAAGN,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,SAASO,mBAAmBA,CAAAC,IAAA,EAAe;EAAAC,EAAA;EAAA,IAAd;IAAEC;EAAS,CAAC,GAAAF,IAAA;EAC5C,MAAM,CAACG,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,MAAMW,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,IAAI,IAAI,CAAC;;EAE7G;EACAb,SAAS,CAAC,MAAM;IACZ,IAAIQ,WAAW,EAAE;MACbI,YAAY,CAACE,OAAO,CAAC,aAAa,EAAEJ,IAAI,CAACK,SAAS,CAACP,WAAW,CAAC,CAAC;IACpE,CAAC,MAAM;MACHI,YAAY,CAACI,UAAU,CAAC,aAAa,CAAC;IAC1C;EACJ,CAAC,EAAE,CAACR,WAAW,CAAC,CAAC;EAEjB,oBACIN,OAAA,CAACC,kBAAkB,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEV,WAAW;MAAEC;IAAe,CAAE;IAAAF,QAAA,EAC/DA;EAAQ;IAAAY,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACgB,CAAC;AAEtC;;AAEA;AAAAhB,EAAA,CAnBgBF,mBAAmB;AAAAmB,EAAA,GAAnBnB,mBAAmB;AAoBnC,OAAO,SAASoB,cAAcA,CAAA,EAAG;EAAAC,GAAA;EAC7B,OAAO3B,UAAU,CAACK,kBAAkB,CAAC;AACzC;AAACsB,GAAA,CAFeD,cAAc;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}