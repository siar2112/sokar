{"ast":null,"code":"var _jsxFileName = \"/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/TeamMemberPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TeamMemberPage = () => {\n  _s();\n  const [teamMembers, setTeamMembers] = useState([]);\n  const [teamGames, setTeamGames] = useState([]);\n  const [teamInfo, setTeamInfo] = useState(null);\n  const [loading, setLoading] = useState(true); // Add loading state variable\n  let {\n    teamID\n  } = useParams();\n  useEffect(() => {\n    const getAllTeamMembers = async () => {\n      const response = await fetch('http://localhost:9000/getAllTeamMembers', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          teamID: teamID\n        }),\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTeamMembers(data);\n      }\n    };\n    const getTeamGames = async () => {\n      const response = await fetch('http://localhost:9000/getTeamGames', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          teamID: teamID\n        }),\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTeamGames(data);\n      }\n    };\n    const getTeamInfo = async () => {\n      const response = await fetch('http://localhost:9000/getTeamInfo', {\n        method: 'post',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          teamID: teamID\n        }),\n        credentials: 'include'\n      });\n      if (response.ok) {\n        const data = await response.json();\n        setTeamInfo(data);\n      }\n    };\n    Promise.all([getAllTeamMembers(), getTeamGames(), getTeamInfo()]).then(() => setLoading(false)) // Set loading to false after all fetches are done\n    .catch(error => console.error(error));\n  }, [teamID]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 16\n    }, this); // Return loading message if the data is still loading\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: teamInfo.Name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        textAlign: \"center\"\n      },\n      children: teamInfo.Team_Value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n};\n_s(TeamMemberPage, \"k308Rx5kJvFgPxxeA4Iuv5FIvFE=\", false, function () {\n  return [useParams];\n});\n_c = TeamMemberPage;\nexport default TeamMemberPage;\nvar _c;\n$RefreshReg$(_c, \"TeamMemberPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","jsxDEV","_jsxDEV","TeamMemberPage","_s","teamMembers","setTeamMembers","teamGames","setTeamGames","teamInfo","setTeamInfo","loading","setLoading","teamID","getAllTeamMembers","response","fetch","method","headers","body","JSON","stringify","credentials","ok","data","json","getTeamGames","getTeamInfo","Promise","all","then","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","Name","Team_Value","_c","$RefreshReg$"],"sources":["/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/TeamMemberPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst TeamMemberPage = () => {\n    const [teamMembers, setTeamMembers] = useState([]);\n    const [teamGames, setTeamGames] = useState([]);\n    const [teamInfo, setTeamInfo] = useState(null);\n    const [loading, setLoading] = useState(true); // Add loading state variable\n    let { teamID } = useParams();\n\n    useEffect(() => {\n        const getAllTeamMembers = async () => {\n            const response = await fetch('http://localhost:9000/getAllTeamMembers', {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ teamID: teamID }),\n                credentials: 'include',\n            });\n            if (response.ok) {\n                const data = await response.json();\n                setTeamMembers(data);\n            }\n        };\n\n        const getTeamGames = async () => {\n            const response = await fetch('http://localhost:9000/getTeamGames', {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ teamID: teamID }),\n                credentials: 'include',\n            });\n            if (response.ok) {\n                const data = await response.json();\n                setTeamGames(data);\n            }\n        };\n\n        const getTeamInfo = async () => {\n            const response = await fetch('http://localhost:9000/getTeamInfo', {\n                method: 'post',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ teamID: teamID }),\n                credentials: 'include',\n            });\n            if (response.ok) {\n                const data = await response.json();\n                setTeamInfo(data);\n            }\n        };\n\n        Promise.all([getAllTeamMembers(), getTeamGames(), getTeamInfo()])\n            .then(() => setLoading(false))  // Set loading to false after all fetches are done\n            .catch((error) => console.error(error));\n    }, [teamID]);\n\n    if (loading) {\n        return <p>Loading...</p>; // Return loading message if the data is still loading\n    }\n\n    return (\n        <div>\n            <h1 style={{textAlign:\"center\"}}>{teamInfo.Name}</h1>\n            <h2 style={{textAlign:\"center\"}}>{teamInfo.Team_Value}</h2>\n            {/* Add components to display teamMembers and teamGames here */}\n        </div>\n    );\n};\n\nexport default TeamMemberPage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}