{"ast":null,"code":"import _slicedToArray from\"/Users/siarradjabi/Documents/GitHub/sokar/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{createContext,useContext,useState,useEffect}from'react';// Create a context for the user session\nimport{jsx as _jsx}from\"react/jsx-runtime\";var UserSessionContext=/*#__PURE__*/createContext();// Provide the context to your components\nexport function UserSessionProvider(_ref){var children=_ref.children;var _useState=useState(function(){return JSON.parse(localStorage.getItem('userSession'))||null;}),_useState2=_slicedToArray(_useState,2),userSession=_useState2[0],setUserSession=_useState2[1];// Effect to update local storage whenever the userSession state changes\nuseEffect(function(){if(userSession){localStorage.setItem('userSession',JSON.stringify(userSession));}else{localStorage.removeItem('userSession');}},[userSession]);return/*#__PURE__*/_jsx(UserSessionContext.Provider,{value:{userSession:userSession,setUserSession:setUserSession},children:children});}// Create a custom hook to use the user session context\nexport function useUserSession(){return useContext(UserSessionContext);}","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","UserSessionContext","UserSessionProvider","_ref","children","_useState","JSON","parse","localStorage","getItem","_useState2","_slicedToArray","userSession","setUserSession","setItem","stringify","removeItem","Provider","value","useUserSession"],"sources":["/Users/siarradjabi/Documents/GitHub/sokar/client/src/components/UserSession.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\n\n// Create a context for the user session\nconst UserSessionContext = createContext();\n\n// Provide the context to your components\nexport function UserSessionProvider({ children }) {\n    const [userSession, setUserSession] = useState(() => JSON.parse(localStorage.getItem('userSession')) || null);\n\n    // Effect to update local storage whenever the userSession state changes\n    useEffect(() => {\n        if (userSession) {\n            localStorage.setItem('userSession', JSON.stringify(userSession));\n        } else {\n            localStorage.removeItem('userSession');\n        }\n    }, [userSession]);\n\n    return (\n        <UserSessionContext.Provider value={{ userSession, setUserSession }}>\n            {children}\n        </UserSessionContext.Provider>\n    );\n}\n\n// Create a custom hook to use the user session context\nexport function useUserSession() {\n    return useContext(UserSessionContext);\n}\n"],"mappings":"sIAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAQ,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBACA,GAAM,CAAAC,kBAAkB,cAAGN,aAAa,CAAC,CAAC,CAE1C;AACA,MAAO,SAAS,CAAAO,mBAAmBA,CAAAC,IAAA,CAAe,IAAZ,CAAAC,QAAQ,CAAAD,IAAA,CAARC,QAAQ,CAC1C,IAAAC,SAAA,CAAsCR,QAAQ,CAAC,iBAAM,CAAAS,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,CAAC,EAAI,IAAI,GAAC,CAAAC,UAAA,CAAAC,cAAA,CAAAN,SAAA,IAAtGO,WAAW,CAAAF,UAAA,IAAEG,cAAc,CAAAH,UAAA,IAElC;AACAZ,SAAS,CAAC,UAAM,CACZ,GAAIc,WAAW,CAAE,CACbJ,YAAY,CAACM,OAAO,CAAC,aAAa,CAAER,IAAI,CAACS,SAAS,CAACH,WAAW,CAAC,CAAC,CACpE,CAAC,IAAM,CACHJ,YAAY,CAACQ,UAAU,CAAC,aAAa,CAAC,CAC1C,CACJ,CAAC,CAAE,CAACJ,WAAW,CAAC,CAAC,CAEjB,mBACIZ,IAAA,CAACC,kBAAkB,CAACgB,QAAQ,EAACC,KAAK,CAAE,CAAEN,WAAW,CAAXA,WAAW,CAAEC,cAAc,CAAdA,cAAe,CAAE,CAAAT,QAAA,CAC/DA,QAAQ,CACgB,CAAC,CAEtC,CAEA;AACA,MAAO,SAAS,CAAAe,cAAcA,CAAA,CAAG,CAC7B,MAAO,CAAAvB,UAAU,CAACK,kBAAkB,CAAC,CACzC"},"metadata":{},"sourceType":"module","externalDependencies":[]}